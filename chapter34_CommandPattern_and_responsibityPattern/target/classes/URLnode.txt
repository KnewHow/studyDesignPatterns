java.net.URL 
Class URL represents a Uniform(制度) Resource Locator, a pointer to a "resource" on the 
World Wide Web. A resource can be something as simple as a file or a directory, 
or it can be a reference to a more complicated object, such as a query to a database 
or to a search engine. More information on the types of URLs and their formats can be 
found at: Types of URL



 In general, a URL can be broken into several parts. Consider the following example:

         http://www.example.com/docs/resource1.html
     

The URL above indicates that the protocol to use is http (HyperText Transfer Protocol) 
and that the information resides(驻留) on a host machine named www.example.com. 
The information on that host machine is named /docs/resource1.html. The exact meaning of 
this name on the host machine is both protocol dependent and host dependent. The 
information normally resides in a file, but it could be generated on the fly. 
This component of the URL is called the path component.

A URL can optionally(可选择的) specify a "port", which is the port number to which the TCP 
connection is made on the remote host machine. If the port is not specified, 
the default port for the protocol is used instead. For example, the default port for http 
is 80. An alternative(可供选择的) port could be specified as:

         http://www.example.com:1080/docs/resource1.html
     

The syntax of URL is defined by RFC 2396: Uniform Resource Identifiers (URI): Generic 
Syntax, amended by RFC 2732: Format for Literal IPv6 Addresses in URLs. The Literal 
IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is 
described here.

A URL may have appended to it a "fragment"(片段), also known as a "ref" or a "reference". 
The fragment is indicated by the sharp sign character "#" followed by more characters. 
For example,

         http://java.sun.com/index.html#chapter1
     

This fragment is not technically(必须的) part of the URL. Rather, it indicates that after 
the specified resource is retrieved, the application is specifically interested in that 
part of the document that has the tag chapter1 attached to it. The meaning of a tag is 
resource specific.

An application can also specify a "relative URL", which contains only enough information 
to reach the resource relative to another URL. Relative URLs are frequently used within 
HTML pages. For example, if the contents of the URL:

         http://java.sun.com/index.html
     

contained within it the relative URL:

         FAQ.html
     

it would be a shorthand for:

         http://java.sun.com/FAQ.html
     

The relative URL need not specify all the components of a URL. If the protocol, host name, 
or port number is missing, the value is inherited(继承) from the fully specified URL. 
The file component must be specified. The optional fragment is not inherited.

The URL class does not itself encode or decode any URL components according to the 
escaping mechanism defined in RFC2396. It is the responsibility of the caller to encode 
any fields, which need to be escaped prior to calling URL, and also to decode any escaped 
fields, that are returned from URL. Furthermore, because URL has no knowledge of URL escaping, it does not recognise equivalence between the encoded or decoded form of the same URL. For example, the two URLs:

    http://foo.com/hello world/ and http://foo.com/hello%20world

would be considered not equal to each other.

Note, the URI class does perform escaping of its component fields in certain circumstances.
The recommended way to manage the encoding and decoding of URLs is to use URI, 
and to convert between these two classes using toURI() and URI.toURL().

The URLEncoder and URLDecoder classes can also be used, but only for HTML form encoding, 
which is not the same as the encoding scheme defined in RFC2396.



public String getFile()

Gets the file name of this URL. The returned file portion will be the same as getPath(), 
plus the concatenation of the value of getQuery(), if any. If there is no query portion, 
this method and getPath() will return identical results.

Returns:
    the file name of this URL, or an empty string if one does not exist 