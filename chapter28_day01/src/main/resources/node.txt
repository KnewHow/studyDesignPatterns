亨元模式(Flyweight Pattern):Use sharing to support large numbers of
fine-grained(细粒度) objects efficiently(使用共享对象可以有效的支持
大量的细粒度的对象)

在一个JavaBean中，并不是每个成员变量都是独一无二的，id就是独一无二的，我们称为
内部状态，但是省份，性别就是固定不变的可以共享的成员属性，我们称为外部对象。你可以
想象，如果每次注册一个用户，我们都需要new 一个对象，然后添加各种信息。现在我们把
一些共享的信息抽取出来，然后每次从池中获取对象。就像是船队把货物运往各个地方，在
高并发的情况下，我们不能为每个货物去建造一艘船，我们应该使用一艘船一下子运过去很多
货物。但是这样会造成线程的安全问题。